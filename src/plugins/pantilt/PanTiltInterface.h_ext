
/***************************************************************************
 *  PanTiltInterface.h - Fawkes BlackBoard Interface - PanTiltInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2009  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_PANTILTINTERFACE_H_
#define __INTERFACES_PANTILTINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class PanTiltInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(PanTiltInterface)
 /// @endcond
 public:
  /* constants */
  static const uint32_t FLAG_SUPPORTS_PAN;
  static const uint32_t FLAG_SUPPORTS_TILT;
  static const uint32_t ERROR_NONE;
  static const uint32_t ERROR_UNSPECIFIC;
  static const uint32_t ERROR_COMMUNICATION;
  static const uint32_t ERROR_PAN_OUTOFRANGE;
  static const uint32_t ERROR_TILT_OUTOFRANGE;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t flags; /**< Flags. */
    float pan; /**< Current pan. */
    float tilt; /**< Current tilt. */
    uint32_t msgid; /**< The ID of the message that is currently being
      processed, or 0 if no message is being processed. */
    bool final; /**< True, if the last goto command has been finished,
      false if it is still running */
    uint32_t error_code; /**< Failure code set if
    final is true. 0 if no error occured, an error code from ERROR_*
    constants otherwise (or a bit-wise combination). */
    bool enabled; /**< Is the pan/tilt unit enabled? */
    bool calibrated; /**< Is the pan/tilt unit calibrated? */
    float min_pan; /**< Minimum pan possible. */
    float max_pan; /**< Maximum pan possible. */
    float min_tilt; /**< Minimum tilt possible. */
    float max_tilt; /**< Maximum tilt possible. */
    float max_pan_velocity; /**< Maximum supported pan velocity. */
    float max_tilt_velocity; /**< Maximum supported tilt velocity. */
    float pan_velocity; /**< Maximum pan velocity currently reached. */
    float tilt_velocity; /**< Maximum tilt velocity currently reached. */
    float pan_margin; /**< Margin in radians around a
    target pan value to consider the motion as final. */
    float tilt_margin; /**< Margin in radians around a
    target tilt value to consider the motion as final. */
  } PanTiltInterface_data_t;
#pragma pack(pop)

  PanTiltInterface_data_t *data;

 public:
  /* messages */
  class StopMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StopMessage_data_t;
#pragma pack(pop)

    StopMessage_data_t *data;

   public:
    StopMessage();
    ~StopMessage();

    StopMessage(const StopMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class FlushMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } FlushMessage_data_t;
#pragma pack(pop)

    FlushMessage_data_t *data;

   public:
    FlushMessage();
    ~FlushMessage();

    FlushMessage(const FlushMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class CalibrateMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } CalibrateMessage_data_t;
#pragma pack(pop)

    CalibrateMessage_data_t *data;

   public:
    CalibrateMessage();
    ~CalibrateMessage();

    CalibrateMessage(const CalibrateMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class ParkMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ParkMessage_data_t;
#pragma pack(pop)

    ParkMessage_data_t *data;

   public:
    ParkMessage();
    ~ParkMessage();

    ParkMessage(const ParkMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class GotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float pan; /**< Current pan. */
      float tilt; /**< Current tilt. */
    } GotoMessage_data_t;
#pragma pack(pop)

    GotoMessage_data_t *data;

   public:
    GotoMessage(const float ini_pan, const float ini_tilt);
    GotoMessage();
    ~GotoMessage();

    GotoMessage(const GotoMessage *m);
    /* Methods */
    float pan() const;
    void set_pan(const float new_pan);
    size_t maxlenof_pan() const;
    float tilt() const;
    void set_tilt(const float new_tilt);
    size_t maxlenof_tilt() const;
    virtual Message * clone() const;
  };

  class TimedGotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float time_sec; /**< Time in seconds when to reach
    the final position. */
      float pan; /**< Current pan. */
      float tilt; /**< Current tilt. */
    } TimedGotoMessage_data_t;
#pragma pack(pop)

    TimedGotoMessage_data_t *data;

   public:
    TimedGotoMessage(const float ini_time_sec, const float ini_pan, const float ini_tilt);
    TimedGotoMessage();
    ~TimedGotoMessage();

    TimedGotoMessage(const TimedGotoMessage *m);
    /* Methods */
    float time_sec() const;
    void set_time_sec(const float new_time_sec);
    size_t maxlenof_time_sec() const;
    float pan() const;
    void set_pan(const float new_pan);
    size_t maxlenof_pan() const;
    float tilt() const;
    void set_tilt(const float new_tilt);
    size_t maxlenof_tilt() const;
    virtual Message * clone() const;
  };

  class SetEnabledMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool enabled; /**< Is the pan/tilt unit enabled? */
    } SetEnabledMessage_data_t;
#pragma pack(pop)

    SetEnabledMessage_data_t *data;

   public:
    SetEnabledMessage(const bool ini_enabled);
    SetEnabledMessage();
    ~SetEnabledMessage();

    SetEnabledMessage(const SetEnabledMessage *m);
    /* Methods */
    bool is_enabled() const;
    void set_enabled(const bool new_enabled);
    size_t maxlenof_enabled() const;
    virtual Message * clone() const;
  };

  class SetVelocityMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float pan_velocity; /**< Maximum pan velocity currently reached. */
      float tilt_velocity; /**< Maximum tilt velocity currently reached. */
    } SetVelocityMessage_data_t;
#pragma pack(pop)

    SetVelocityMessage_data_t *data;

   public:
    SetVelocityMessage(const float ini_pan_velocity, const float ini_tilt_velocity);
    SetVelocityMessage();
    ~SetVelocityMessage();

    SetVelocityMessage(const SetVelocityMessage *m);
    /* Methods */
    float pan_velocity() const;
    void set_pan_velocity(const float new_pan_velocity);
    size_t maxlenof_pan_velocity() const;
    float tilt_velocity() const;
    void set_tilt_velocity(const float new_tilt_velocity);
    size_t maxlenof_tilt_velocity() const;
    virtual Message * clone() const;
  };

  class SetMarginMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float pan_margin; /**< Margin in radians around a
    target pan value to consider the motion as final. */
      float tilt_margin; /**< Margin in radians around a
    target tilt value to consider the motion as final. */
    } SetMarginMessage_data_t;
#pragma pack(pop)

    SetMarginMessage_data_t *data;

   public:
    SetMarginMessage(const float ini_pan_margin, const float ini_tilt_margin);
    SetMarginMessage();
    ~SetMarginMessage();

    SetMarginMessage(const SetMarginMessage *m);
    /* Methods */
    float pan_margin() const;
    void set_pan_margin(const float new_pan_margin);
    size_t maxlenof_pan_margin() const;
    float tilt_margin() const;
    void set_tilt_margin(const float new_tilt_margin);
    size_t maxlenof_tilt_margin() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  PanTiltInterface();
  ~PanTiltInterface();

 public:
  /* Methods */
  uint32_t flags() const;
  void set_flags(const uint32_t new_flags);
  size_t maxlenof_flags() const;
  float pan() const;
  void set_pan(const float new_pan);
  size_t maxlenof_pan() const;
  float tilt() const;
  void set_tilt(const float new_tilt);
  size_t maxlenof_tilt() const;
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  uint32_t error_code() const;
  void set_error_code(const uint32_t new_error_code);
  size_t maxlenof_error_code() const;
  bool is_enabled() const;
  void set_enabled(const bool new_enabled);
  size_t maxlenof_enabled() const;
  bool is_calibrated() const;
  void set_calibrated(const bool new_calibrated);
  size_t maxlenof_calibrated() const;
  float min_pan() const;
  void set_min_pan(const float new_min_pan);
  size_t maxlenof_min_pan() const;
  float max_pan() const;
  void set_max_pan(const float new_max_pan);
  size_t maxlenof_max_pan() const;
  float min_tilt() const;
  void set_min_tilt(const float new_min_tilt);
  size_t maxlenof_min_tilt() const;
  float max_tilt() const;
  void set_max_tilt(const float new_max_tilt);
  size_t maxlenof_max_tilt() const;
  float max_pan_velocity() const;
  void set_max_pan_velocity(const float new_max_pan_velocity);
  size_t maxlenof_max_pan_velocity() const;
  float max_tilt_velocity() const;
  void set_max_tilt_velocity(const float new_max_tilt_velocity);
  size_t maxlenof_max_tilt_velocity() const;
  float pan_velocity() const;
  void set_pan_velocity(const float new_pan_velocity);
  size_t maxlenof_pan_velocity() const;
  float tilt_velocity() const;
  void set_tilt_velocity(const float new_tilt_velocity);
  size_t maxlenof_tilt_velocity() const;
  float pan_margin() const;
  void set_pan_margin(const float new_pan_margin);
  size_t maxlenof_pan_margin() const;
  float tilt_margin() const;
  void set_tilt_margin(const float new_tilt_margin);
  size_t maxlenof_tilt_margin() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
