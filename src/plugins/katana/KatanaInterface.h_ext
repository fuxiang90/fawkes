
/***************************************************************************
 *  KatanaInterface.h - Fawkes BlackBoard Interface - KatanaInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2009  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_KATANAINTERFACE_H_
#define __INTERFACES_KATANAINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class KatanaInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(KatanaInterface)
 /// @endcond
 public:
  /* constants */
  static const uint32_t SENSOR_IR_RIGHT_INNER_MIDDLE;
  static const uint32_t SENSOR_IR_RIGHT_INNER_FRONT;
  static const uint32_t SENSOR_RESERVED_2;
  static const uint32_t SENSOR_COND_BOTH;
  static const uint32_t SENSOR_IR_RIGHT_OUTER_FRONT;
  static const uint32_t SENSOR_IR_RIGHT_BOTTOM_FRONT;
  static const uint32_t SENSOR_FORCE_RIGHT_REAR;
  static const uint32_t SENSOR_FORCE_RIGHT_FRONT;
  static const uint32_t SENSOR_IR_LEFT_INNER_MIDDLE;
  static const uint32_t SENSOR_IR_LEFT_INNER_FRONT;
  static const uint32_t SENSOR_RESERVED_10;
  static const uint32_t SENSOR_IR_CENTER_GRIPPER;
  static const uint32_t SENSOR_IR_LEFT_OUTER_FRONT;
  static const uint32_t SENSOR_IR_LEFT_BOTTOM_FRONT;
  static const uint32_t SENSOR_FORCE_LEFT_REAR;
  static const uint32_t SENSOR_FORCE_LEFT_FRONT;
  static const uint32_t ERROR_NONE;
  static const uint32_t ERROR_UNSPECIFIC;
  static const uint32_t ERROR_CMD_START_FAILED;
  static const uint32_t ERROR_NO_SOLUTION;
  static const uint32_t ERROR_COMMUNICATION;
  static const uint32_t ERROR_MOTOR_CRASHED;

 private:
#pragma pack(push,4)
  /** Internal data storage, do NOT modify! */
  typedef struct {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint8_t sensor_value[16]; /**< Sensor
    values. Use SENSOR_* indexes for accessing the values. */
    float x; /**< X-Coordinate for tool position
    compared to base coordinate system. */
    float y; /**< Y-Coordinate for tool position
    compared to base coordinate system. */
    float z; /**< Z-Coordinate for tool position
    compared to base coordinate system. */
    float phi; /**< Euler angle Phi of tool orientation. */
    float theta; /**< Euler angle Theta of tool orientation. */
    float psi; /**< Euler angle Psi of tool orientation.. */
    uint32_t msgid; /**< The ID of the message that is currently being
      processed, or 0 if no message is being processed. */
    bool final; /**< True, if the last goto command has been finished,
      false if it is still running */
    uint32_t error_code; /**< Failure code set if
    final is true. 0 if no error occured, an error code from ERROR_*
    constants otherwise (or a bit-wise combination). */
    bool enabled; /**< Are motors enabled? */
    bool calibrated; /**< Has arm been calibrated? */
    uint8_t max_velocity; /**< Maximum velocity */
    uint8_t num_motors; /**< Number of motors */
  } KatanaInterface_data_t;
#pragma pack(pop)

  KatanaInterface_data_t *data;

 public:
  /* messages */
  class StopMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } StopMessage_data_t;
#pragma pack(pop)

    StopMessage_data_t *data;

   public:
    StopMessage();
    ~StopMessage();

    StopMessage(const StopMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class FlushMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } FlushMessage_data_t;
#pragma pack(pop)

    FlushMessage_data_t *data;

   public:
    FlushMessage();
    ~FlushMessage();

    FlushMessage(const FlushMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class ParkMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } ParkMessage_data_t;
#pragma pack(pop)

    ParkMessage_data_t *data;

   public:
    ParkMessage();
    ~ParkMessage();

    ParkMessage(const ParkMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class LinearGotoMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float x; /**< X-Coordinate for tool position
    compared to base coordinate system. */
      float y; /**< Y-Coordinate for tool position
    compared to base coordinate system. */
      float z; /**< Z-Coordinate for tool position
    compared to base coordinate system. */
      float phi; /**< Euler angle Phi of tool orientation. */
      float theta; /**< Euler angle Theta of tool orientation. */
      float psi; /**< Euler angle Psi of tool orientation.. */
    } LinearGotoMessage_data_t;
#pragma pack(pop)

    LinearGotoMessage_data_t *data;

   public:
    LinearGotoMessage(const float ini_x, const float ini_y, const float ini_z, const float ini_phi, const float ini_theta, const float ini_psi);
    LinearGotoMessage();
    ~LinearGotoMessage();

    LinearGotoMessage(const LinearGotoMessage *m);
    /* Methods */
    float x() const;
    void set_x(const float new_x);
    size_t maxlenof_x() const;
    float y() const;
    void set_y(const float new_y);
    size_t maxlenof_y() const;
    float z() const;
    void set_z(const float new_z);
    size_t maxlenof_z() const;
    float phi() const;
    void set_phi(const float new_phi);
    size_t maxlenof_phi() const;
    float theta() const;
    void set_theta(const float new_theta);
    size_t maxlenof_theta() const;
    float psi() const;
    void set_psi(const float new_psi);
    size_t maxlenof_psi() const;
    virtual Message * clone() const;
  };

  class CalibrateMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } CalibrateMessage_data_t;
#pragma pack(pop)

    CalibrateMessage_data_t *data;

   public:
    CalibrateMessage();
    ~CalibrateMessage();

    CalibrateMessage(const CalibrateMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class OpenGripperMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } OpenGripperMessage_data_t;
#pragma pack(pop)

    OpenGripperMessage_data_t *data;

   public:
    OpenGripperMessage();
    ~OpenGripperMessage();

    OpenGripperMessage(const OpenGripperMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class CloseGripperMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } CloseGripperMessage_data_t;
#pragma pack(pop)

    CloseGripperMessage_data_t *data;

   public:
    CloseGripperMessage();
    ~CloseGripperMessage();

    CloseGripperMessage(const CloseGripperMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  class SetEnabledMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      bool enabled; /**< Are motors enabled? */
    } SetEnabledMessage_data_t;
#pragma pack(pop)

    SetEnabledMessage_data_t *data;

   public:
    SetEnabledMessage(const bool ini_enabled);
    SetEnabledMessage();
    ~SetEnabledMessage();

    SetEnabledMessage(const SetEnabledMessage *m);
    /* Methods */
    bool is_enabled() const;
    void set_enabled(const bool new_enabled);
    size_t maxlenof_enabled() const;
    virtual Message * clone() const;
  };

  class SetMaxVelocityMessage : public Message
  {
   private:
#pragma pack(push,4)
    /** Internal data storage, do NOT modify! */
    typedef struct {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint8_t max_velocity; /**< Maximum velocity */
    } SetMaxVelocityMessage_data_t;
#pragma pack(pop)

    SetMaxVelocityMessage_data_t *data;

   public:
    SetMaxVelocityMessage(const uint8_t ini_max_velocity);
    SetMaxVelocityMessage();
    ~SetMaxVelocityMessage();

    SetMaxVelocityMessage(const SetMaxVelocityMessage *m);
    /* Methods */
    uint8_t max_velocity() const;
    void set_max_velocity(const uint8_t new_max_velocity);
    size_t maxlenof_max_velocity() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  KatanaInterface();
  ~KatanaInterface();

 public:
  /* Methods */
  uint8_t * sensor_value() const;
  uint8_t sensor_value(unsigned int index) const;
  void set_sensor_value(unsigned int index, const uint8_t new_sensor_value);
  void set_sensor_value(const uint8_t * new_sensor_value);
  size_t maxlenof_sensor_value() const;
  float x() const;
  void set_x(const float new_x);
  size_t maxlenof_x() const;
  float y() const;
  void set_y(const float new_y);
  size_t maxlenof_y() const;
  float z() const;
  void set_z(const float new_z);
  size_t maxlenof_z() const;
  float phi() const;
  void set_phi(const float new_phi);
  size_t maxlenof_phi() const;
  float theta() const;
  void set_theta(const float new_theta);
  size_t maxlenof_theta() const;
  float psi() const;
  void set_psi(const float new_psi);
  size_t maxlenof_psi() const;
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  uint32_t error_code() const;
  void set_error_code(const uint32_t new_error_code);
  size_t maxlenof_error_code() const;
  bool is_enabled() const;
  void set_enabled(const bool new_enabled);
  size_t maxlenof_enabled() const;
  bool is_calibrated() const;
  void set_calibrated(const bool new_calibrated);
  size_t maxlenof_calibrated() const;
  uint8_t max_velocity() const;
  void set_max_velocity(const uint8_t new_max_velocity);
  size_t maxlenof_max_velocity() const;
  uint8_t num_motors() const;
  void set_num_motors(const uint8_t new_num_motors);
  size_t maxlenof_num_motors() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
