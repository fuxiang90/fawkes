$#include <interfaces/SoccerPenaltyInterface.h>
$using namespace fawkes;
namespace fawkes {
class SoccerPenaltyInterface : public Interface
{
  static const unsigned short SPL_PENALTY_NONE;
  static const unsigned short SPL_PENALTY_BALL_HOLDING;
  static const unsigned short SPL_PENALTY_PLAYER_PUSHING;
  static const unsigned short SPL_PENALTY_OBSTRUCTION;
  static const unsigned short SPL_PENALTY_INACTIVE_PLAYER;
  static const unsigned short SPL_PENALTY_ILLEGAL_DEFENDER;
  static const unsigned short SPL_PENALTY_LEAVING_THE_FIELD;
  static const unsigned short SPL_PENALTY_PLAYING_WITH_HANDS;
  static const unsigned short SPL_PENALTY_REQ_FOR_PICKUP;
  static const unsigned short SPL_PENALTY_MANUAL;

  class SetPenaltyMessage : public Message
  {
    SetPenaltyMessage(unsigned short ini_penalty);
    SetPenaltyMessage();
    ~SetPenaltyMessage();

    unsigned short penalty();
    void set_penalty(const unsigned short new_penalty);
    int maxlenof_penalty() const;
  };

  unsigned short penalty();
  void set_penalty(const unsigned short new_penalty);
  int maxlenof_penalty() const;
  unsigned short remaining();
  void set_remaining(const unsigned short new_remaining);
  int maxlenof_remaining() const;
  bool                    oftype(const char *interface_type) const;
  const void *            datachunk() const;
  unsigned int            datasize() const;
  const char *            type() const;
  const char *            id() const;
  const char *            uid() const;
  unsigned int            serial() const;
  unsigned int            mem_serial() const;
  bool                    operator== (Interface &comp) const;
  const unsigned char *   hash() const;
  int                     hash_size() const;
  const char *            hash_printable() const;
  bool                    is_writer() const;
  void                    set_from_chunk(void *chunk);
  virtual Message *   create_message(const char *type) const = 0;
  void          read();
  void          write();
  bool          has_writer() const;
  unsigned int  num_readers() const;
  unsigned int  msgq_enqueue_copy(Message *message);
  void          msgq_remove(Message *message);
  void          msgq_remove(unsigned int message_id);
  unsigned int  msgq_size();
  void          msgq_flush();
  void          msgq_lock();
  bool          msgq_try_lock();
  void          msgq_unlock();
  void          msgq_pop();
  Message *     msgq_first();
  bool          msgq_empty();


};

}
